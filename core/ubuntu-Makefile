KERNEAL=kerneal/
LIB=lib/
KERNEAL_LIB=$(LIB)kerneal/

PRINT_H=$(KERNEAL_LIB)print.h
STDINT_H=$(LIB)stdint.h 
INIT_H=$(KERNEAL)init.h
INTERRUPT_H=$(KERNEAL)interrupt.h 
GLOBAL_H=$(KERNEAL)global.h
IN_LIB_IO_H=$(KERNEAL_LIB)io.h 

IN_INTERRUPT_C=$(KERNEAL)interrupt.c 
IN_INIT_C=$(KERNEAL)init.c 
IN_KERNEAL_ASM=$(KERNEAL)kerneal.asm 
IN_LIB_PRINT_ASM=$(KERNEAL_LIB)print.asm
IN_MAIN_C=$(KERNEAL)main.c 

OUT_BUILD=build/
OUT_KERNEAL_BUILD=$(OUT_BUILD)kerneal/
OUT_KERNEAL_LIB_BUILD=$(OUT_KERNEAL_BUILD)lib/
OUT_F_KERNEAL_BIN=$(OUT_KERNEAL_BUILD)kerneal.bin
OUT_F_PRINT_O=$(OUT_KERNEAL_LIB_BUILD)print.o
OUT_F_MAIN_O=$(OUT_KERNEAL_BUILD)main.o
OUT_F_KERNEAL_O=$(OUT_KERNEAL_BUILD)kerneal.o 
OUT_F_INTERRUPT_O=$(OUT_KERNEAL_BUILD)interrupt.o 
OUT_F_INIT_O=$(OUT_KERNEAL_BUILD)init.o 

$(OUT_F_KERNEAL_O): $(IN_KERNEAL_ASM)
	nasm -f elf -o $(OUT_F_KERNEAL_O) $(IN_KERNEAL_ASM)

$(OUT_F_PRINT_O):$(IN_LIB_PRINT_ASM)
		nasm -f elf -o $(OUT_F_PRINT_O) $(IN_LIB_PRINT_ASM)
		
$(OUT_F_MAIN_O):$(PRINT_H) $(INIT_H) $(IN_MAIN_C)
	gcc -I $(KERNEAL_LIB) -I $(KERNEAL) -I $(LIB) -c -fno-builtin  -fno-stack-protector -o $(OUT_F_MAIN_O) $(IN_MAIN_C)


$(OUT_F_INIT_O):$(INIT_H) $(PRINT_H) $(INTERRUPT_H)  $(IN_INIT_C)
	gcc -I $(KERNEAL_LIB) -I $(KERNEAL) -I $(LIB) -c -fno-builtin  -fno-stack-protector \
		-o $(OUT_F_INIT_O)  $(IN_INIT_C)

$(OUT_F_INTERRUPT_O):$(INTERRUPT_H) $(STDINT_H) $(GLOBAL_H) $(IN_LIB_IO_H) $(PRINT_H) $(IN_INTERRUPT_C) 
	gcc -I $(KERNEAL_LIB) -I $(KERNEAL) -I $(LIB) -c -fno-builtin  -fno-stack-protector \
		-o $(OUT_F_INTERRUPT_O) $(IN_INTERRUPT_C)

#内核
$(OUT_F_KERNEAL_BIN): $(OUT_F_MAIN_O) $(OUT_F_PRINT_O) $(OUT_F_INTERRUPT_O) $(OUT_F_INIT_O) $(OUT_F_KERNEAL_O)
	# 链接的时候，调用在前，实现在后 （main.o在 print.o前)
		ld -Ttext 0xc0001500  -e main -o $(OUT_F_KERNEAL_BIN) \
			$(OUT_F_MAIN_O) $(OUT_F_INIT_O) $(OUT_F_INTERRUPT_O) $(OUT_F_PRINT_O) $(OUT_F_KERNEAL_O) 
						
go:$(OUT_F_KERNEAL_BIN)
	echo 'go'